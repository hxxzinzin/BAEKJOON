// 백준 11497번- 통나무 건너뛰기
// 아이디어
// 1) 각각의 테스트 케이스마다 pick함수를 이용해 순열로 나올 수 있는 모든 경우의 수 중에서 원소의 차의 최대값을 저장 후 이를 비교,
// 최댓값이 가장 적은 케이스를 찾음 -> 그 케이스의 최댓값을 출력
// => 런타임이 너무 길어질 것 같아서 pass함

// 2) 인접한 두 통나무 간의 높이의 차의 최댓값이 난이도인데 이때 낮은 난이도를 가지는 경우의 수를 찾아야 하는 문제임.
// 따라서 난이도가 최대한 낮아야 답이 됨.
// 내가 생각한 아이디어는 partition을 이용하는 qsort임. 정렬된 테스트케이스의 숫자열에서 가장 큰 수를 pivot으로 삼고,
// 이를 중간의 원소와 자리바꿈 한 뒤, pivot 기준 앞 숫자열은 오른차순으로, 뒤 숫자열은 내림차순으로 재정렬 해주면
// 원으로 이루어진 배열이므로 맨 처음과 맨 끝 원소의 차도 줄어들 수 있음.
// => 잘못 생각함. 2 4 5 7 9 를 예시로 생각하면 이 논리가 틀렸다는 걸 알 수 있음

// 오류를 발견하고 멈춘 2)의 코드
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define MAX 100000
struct Tree {
	int num;
	int height[MAX];
};

int partition(int* A, int p, int r) { // p -> 제일 첫 idx, r -> 제일 마지막 idx
	int i, j;
	int t;

	i = p - 1; // p = 0이면 i = -1
	// i는 partition을 놓을 부분을 의미.
	// 따라서 pivot보다 작은 애들을 넣을 때만 증가해서 마지막에 partiton 넣어주면 됨!

	for (j = p; j < r; j++) { // 처음부터 pivot 전까지 loop
		if (A[j] < A[r]) { // A[r] => pivot
			i++; // 작은 값이니까 그 값을 넣어주려고 i 증가
			//A[i] <-> A[j] => 자리 swap : i 기준으로 pivot보다 큰값, 작은 값 나타내려고!
			t = A[i];
			A[i] = A[j];
			A[j] = t;
		}
	}

	i++; // pivot의 위치 꽂아주기!
	t = A[i];
	A[i] = A[r]; // pivot과 i를 idx로 가지는 값과 swap!
	A[r] = t;

	return i; // => pivot이 위치한 부분. => 이걸로 몇번째 작은수를 구할 수 있음.
}
void quickSort(int* A, int p, int r) {
	if (p < r) {
		int q = partition(A, p, r);
		quickSort(A, p, q - 1);
		quickSort(A, q + 1, r);
	}
}

int des_partiton(int* A, int p, int r) {
	int i, j;
	int t;

	i = p - 1;

	for (j = p; j < r; j++) {
		if (A[j] > A[r]) { // A[r] => pivot
			i++; // 작은 값이니까 그 값을 넣어주려고 i 증가
			//A[i] <-> A[j] => 자리 swap : i 기준으로 pivot보다 큰값, 작은 값 나타내려고!
			t = A[i];
			A[i] = A[j];
			A[j] = t;
		}
	}

	i++; // pivot의 위치 꽂아주기!
	t = A[i];
	A[i] = A[r]; // pivot과 i를 idx로 가지는 값과 swap!
	A[r] = t;

	return i; // => pivot이 위치한 부분. => 이걸로 몇번째 작은수를 구할 수 있음.
}
void des_quickSort(int* A, int p, int r) {
	if (p < r) {
		int q = partition(A, p, r);
		quickSort(A, p, q - 1);
		quickSort(A, q + 1, r);
	}
}

void define_max(struct Tree A) {
	int i;
	int max = -1;
	int diff;

	for (i = 0; i < A.num; i++) {
		diff = A.height[i] - A.height[i + 1];
		if (diff < 0) // 음수일 경우 양수값으로 바꿔 줌
			diff = -diff;

		if (max < diff)
			max = diff;
	}

	printf("%d\n", diff);
}

int main() {
	// 구조체 이용
	struct Tree* test_case;
	int i = 0;
	int n;

	scanf("%d", &n);

	test_case = (struct Tree*)malloc(sizeof(struct Tree) * n);
	// 문제 입력
	for (i = 0; i < n; i++) {
		scanf("%d", &test_case[i].num);
		for (int j = 0; j < test_case[i].num; j++)
			scanf("%d", &test_case[i].height[j]);
	}
	i = 0;

	// 핵심 내용
	// 참고 => --test_case == 0 은 미리 뺀 후 0과 비교. 참이면 while문 실행, 거짓이면 break.
	//      => test_case-- == 0 은 먼저 0과 비교 후 연산자 수행. 그 후 참 여부에 따라 while 실행.
	while (test_case[i].num != 0) {
		int tmp, max = -1;
		quickSort(test_case[i].height, 0, test_case[i].num - 1); // 정렬

		/*for (int j = 0; j < test_case[i].num; j++)
			printf("%d ", test_case[i].height[j]);
		printf("\n");
		*/

		// L[(treeN[i] - 1) / 2]와 L[treeN[i] - 1] (-> pivot) 위치 변경
		tmp = test_case[i].height[test_case[i].num - 1];
		test_case[i].height[test_case[i].num - 1] = test_case[i].height[(test_case[i].num - 1) / 2];
		test_case[i].height[(test_case[i].num - 1) / 2] = tmp;

		// pivot 뒤 문자열 내림차순 정렬
		des_quickSort(test_case[i].height, (test_case[i].num - 1) / 2 + 1, test_case[i].num - 1);

		// 난이도 구하기
		define_max(test_case[i]);

		test_case[i].num--;
		i++;
	}

	return 0;
}
