// 11497 최종 답

// 나름 답과 문제를 분석해보니, 중앙에 최대값이 있어야 하고 중앙 기준 오른쪽이 중앙 왼쪽 보다 큰 수가 배치되어야 함.
// 즉, a b c d e f g 를 오름차순 배열이라 생각하면 해당 답은 a c e g f d b 이다.
// 이 부분을 어떻게 구현을 할 지 고민하다가 인덱스가 떠올랐음.
// 위의 예시를 바탕으로 보면 인덱스가 짝수인 원소들이 중앙 기준 왼쪽에 정렬되어있고 홀수인 원소들은 중앙 기준 오른쪽에 오름차순 정렬되어 있음.
// 이때 오름차순 정렬은 원소값일 수도 있지만 인덱스로도 확인 가능함.
// 따라서 나는 이 아이디어를 바탕으로 해당 문제를 해결 함.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define MAX 100000
struct Tree {
	int num;
	int height[MAX];
};

int partition(int* A, int p, int r) { // p -> 제일 첫 idx, r -> 제일 마지막 idx
	int i, j;
	int t;

	i = p - 1; // p = 0이면 i = -1
	// i는 partition을 놓을 부분을 의미. 따라서 pivot보다 작은 애들을 넣을 때만 증가해서 마지막에 partiton 넣어주면 됨!

	for (j = p; j < r; j++) { // 처음부터 pivot 전까지 loop
		if (A[j] < A[r]) { // A[r] => pivot
			i++; // 작은 값이니까 그 값을 넣어주려고 i 증가
			//A[i] <-> A[j] => 자리 swap : i 기준으로 pivot보다 큰값, 작은 값 나타내려고!
			t = A[i];
			A[i] = A[j];
			A[j] = t;
		}
	}

	i++; // pivot의 위치 꽂아주기!
	t = A[i];
	A[i] = A[r]; // pivot과 i를 idx로 가지는 값과 swap!
	A[r] = t;
	return i; // => pivot이 위치한 부분. => 이걸로 몇번째 작은수를 구할 수 있음.
}
void quickSort(int* A, int p, int r) {
	if (p < r) {
		int q = partition(A, p, r);
		quickSort(A, p, q - 1);
		quickSort(A, q + 1, r);
	}
}

int main() {
	struct Tree* T;
	int i = 0;
	int n;
	int *tmp;
	int diff, max = -1;

	scanf("%d", &n);

	T = (struct Tree*)malloc(sizeof(struct Tree) * n);
	
	// 문제 입력
	for (i = 0; i < n; i++) {
		scanf("%d", &T[i].num);
		for (int j = 0; j < T[i].num; j++)
			scanf("%d", &T[i].height[j]);
	}
	i = 0;
	
	while (n != 0) {
		tmp = (int*)malloc(sizeof(int) * T[i].num); // 최종 정렬 한 후 저장할 배열 동적할당

		quickSort(T[i].height, 0, T[i].num - 1);

		int j = 0, k = 0;
		for (j = 0; j < T[i].num; j++) // 인덱스가 짝수인 경우 tmp에 저장
			if (j % 2 == 0) {
				tmp[k] = T[i].height[j];
				k++;
			}

		for (j = T[i].num - 1; j > 0; j--) { // 인덱스가 홀수인 경우 tmp에 저장
			if (j % 2 != 0) {
				tmp[k] = T[i].height[j];
				k++;
			}
		}

		// 저장된 tmp 배열에서 최대 diff를 찾아서 출력
		for (j = 0; j < k; j++) {
			if (j + 1 == k)
				diff = tmp[0] - tmp[j];
			else
				diff = tmp[j + 1] - tmp[j];
			
			if (diff < 0)
				diff = -diff;

			if (max < diff)
				max = diff;
		}
		printf("%d\n", max);

		n--;
		i++;
		max = -1;
	}

	free(T);
	free(tmp);

	return 0;
}
